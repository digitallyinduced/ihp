.PHONY: help all

# Use bash as we sometimes use bash specific syntax, like pipefail below
SHELL=/bin/bash
.SHELLFLAGS := -eu -o pipefail -c  
.ONESHELL:

MAKEFLAGS += --warn-undefined-variables
MAKEFLAGS += --no-builtin-rules

GHC_EXTENSIONS=
GHC_EXTENSIONS+= -XOverloadedStrings
GHC_EXTENSIONS+= -XNoImplicitPrelude
GHC_EXTENSIONS+= -XImplicitParams
GHC_EXTENSIONS+= -XRank2Types
GHC_EXTENSIONS+= -XDisambiguateRecordFields
GHC_EXTENSIONS+= -XNamedFieldPuns
GHC_EXTENSIONS+= -XDuplicateRecordFields
GHC_EXTENSIONS+= -XOverloadedLabels
GHC_EXTENSIONS+= -XFlexibleContexts
GHC_EXTENSIONS+= -XTypeSynonymInstances
GHC_EXTENSIONS+= -XFlexibleInstances
GHC_EXTENSIONS+= -XQuasiQuotes
GHC_EXTENSIONS+= -XTypeFamilies
GHC_EXTENSIONS+= -XPackageImports
GHC_EXTENSIONS+= -XScopedTypeVariables
GHC_EXTENSIONS+= -XRecordWildCards
GHC_EXTENSIONS+= -XTypeApplications
GHC_EXTENSIONS+= -XDataKinds
GHC_EXTENSIONS+= -XInstanceSigs
GHC_EXTENSIONS+= -XDeriveGeneric
GHC_EXTENSIONS+= -XMultiParamTypeClasses
GHC_EXTENSIONS+= -XTypeOperators
GHC_EXTENSIONS+= -XDeriveDataTypeable
GHC_EXTENSIONS+= -XMultiWayIf
GHC_EXTENSIONS+= -XUndecidableInstances
GHC_EXTENSIONS+= -XBlockArguments
GHC_EXTENSIONS+= -XPartialTypeSignatures
GHC_EXTENSIONS+= -XLambdaCase
GHC_EXTENSIONS+= -Wno-unsafe
GHC_EXTENSIONS+= -Wno-name-shadowing
GHC_EXTENSIONS+= -Wno-monomorphism-restriction
GHC_EXTENSIONS+= -Wno-safe
GHC_EXTENSIONS+= -Wno-missing-local-signatures
GHC_EXTENSIONS+= -Wno-missing-home-modules
GHC_EXTENSIONS+= -XDefaultSignatures
GHC_EXTENSIONS+= -XEmptyDataDeriving
GHC_EXTENSIONS+= -XBangPatterns
GHC_EXTENSIONS+= -XBlockArguments
GHC_EXTENSIONS+= -XMultiWayIf
GHC_EXTENSIONS+= -XFunctionalDependencies
GHC_EXTENSIONS+= -fbyte-code
GHC_EXTENSIONS+= -Wno-partial-type-signatures
GHC_EXTENSIONS+= -XPartialTypeSignatures
GHC_EXTENSIONS+= -XStandaloneDeriving
GHC_EXTENSIONS+= -XDerivingVia
GHC_EXTENSIONS+= -Werror=missing-fields
GHC_EXTENSIONS+= -fwarn-incomplete-patterns

GHC_OPTIONS=-threaded -i. -ibuild -iConfig
GHC_OPTIONS+= ${GHC_EXTENSIONS}
GHC_OPTIONS+= -j2
GHC_OPTIONS+= +RTS -A256m -n2m --RTS
GHC_OPTIONS+= -package ihp

PROD_GHC_OPTIONS+= -funfolding-use-threshold=16
PROD_GHC_OPTIONS+= -optc-O3
PROD_GHC_OPTIONS+= -funbox-strict-fields
PROD_GHC_OPTIONS+= -fconstraint-solver-iterations=100
PROD_GHC_OPTIONS+= -fexpose-all-unfoldings
PROD_GHC_OPTIONS+= -flate-dmd-anal
PROD_GHC_OPTIONS+= -fspec-constr-keen
PROD_GHC_OPTIONS+= -fspecialise-aggressively
PROD_GHC_OPTIONS+= -fstatic-argument-transformation
PROD_GHC_OPTIONS+= -fmax-worker-args=200
PROD_GHC_OPTIONS+= -with-rtsopts="-A512m -n4m"


.DEFAULT_GOAL := help
RUNGHC=runghc

all: build/ihp-lib build/Generated/Types.hs

.envrc: default.nix ## Rebuild nix packages and .envrc
	rm -f .envrc
	echo "PATH_add $$(nix-shell --run 'echo $$PATH')" > .envrc
	direnv allow

build/bin:
	mkdir -p build/bin

run-production: build/bin/RunProdServer build/Generated/Types.hs ## Run Production Server
	build/bin/RunProdServer

psql: ## Connects to the running postgresql server
	@psql -h $$PWD/build/db -d app

db: Application/Schema.sql Application/Fixtures.sql ## Creates a new database with the current Schema and imports Fixtures.sql
	echo "drop schema public cascade; create schema public;" | psql -h $$PWD/build/db -d app
	psql -h $$PWD/build/db -d app < Application/Schema.sql
	psql -h $$PWD/build/db -d app < Application/Fixtures.sql

dumpdb: dump_db ## Saves the current database state into the Fixtures.sql
dump_db: ## Saves the current database state into the Fixtures.sql
	pg_dump -a --inserts --column-inserts --disable-triggers -h $$PWD/build/db app | sed -e '/^--/d' > Application/Fixtures.sql

build/Generated/Types.hs: Application/Schema.sql ## Rebuilds generated types
	mkdir -p build/Generated
	build-generated-code

build/bin/RunUnoptimizedProdServer: Main.hs build/bin static/prod.js static/prod.css build/Generated/Types.hs ## Quickly does a production build (all compiler optimizations disabled)
	mkdir -p build/RunUnoptimizedProdServer
	ghc -O0 ${GHC_OPTIONS} $< -o $@ -odir build/RunUnoptimizedProdServer -hidir build/RunUnoptimizedProdServer
	chmod +x $<
	rm -f build/bin/RunProdServer
	ln -s `basename $@` build/bin/RunProdServer

build/bin/RunOptimizedProdServer: Main.hs build/bin static/prod.js static/prod.css ## Full production build with all ghc optimizations (takes a while)
	mkdir -p build/RunOptimizedProdServer
	ghc -O2 ${GHC_OPTIONS} ${PROD_GHC_OPTIONS} $< -o $@ -odir build/RunOptimizedProdServer -hidir build/RunOptimizedProdServer
	chmod +x $<
	rm -f build/bin/RunProdServer
	ln -s `basename $@` build/bin/RunProdServer

clean: ## Resets all build and temporary files
	rm -rf build/bin
	rm -rf IHP/IHP/static/node_modules
	rm -rf build/db
	rm -f .envrc

static/prod.js: $(JS_FILES) ## Builds the production js bundle
	awk -v RS='\0' '{print "(function (window, document, undefined) \{"; print; print "\n\})(window, document);";}' $(JS_FILES) > $@

static/prod.css: $(CSS_FILES) ## Builds the production css bundle
	cat $(CSS_FILES) > $@

print-ghc-options: ## Prints all used ghc options. Useful for scripting
	@echo ${GHC_OPTIONS}

print-ghc-extensions: ## Prints all used ghc extensions. Useful for scripting
	@echo ${GHC_EXTENSIONS}

help: ## This help page
	@grep -h -E '^[a-zA-Z_///-\.]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

ifneq ($(wildcard IHP/.*),)
IHP_LIB = ../IHP/lib/IHP
else
IHP_LIB = $(shell dirname $$(which RunDevServer))/../lib/IHP
endif

build/ihp-lib: # Used by application .ghci
	mkdir -p build
	rm -f build/ihp-lib
	ln -s ${IHP_LIB} build/ihp-lib
