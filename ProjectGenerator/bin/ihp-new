#!/usr/bin/env bash

set -e

readlink "$(command -v "$0")" || echo
NIXPKGS_ATTR="nixpkgs"

if [ -f /etc/os-release ]; then
	grep '^ID=nixos$' /etc/os-release >/dev/null 2>&1 && NIXPKGS_ATTR="nixos"
fi

IHP_NEW_VERSION="1.3.0"
BOILERPLATE_GIT_URL="https://github.com/digitallyinduced/ihp-boilerplate.git"

for _ in once; do
	# requires at least one argument
	# two could be wrong, more definitely are
	# if it's one but it starts with a minus, that's invalid
	if [ $# -lt 1 ] || [ $# -ge 2 ] || [[ "$#" == "1" && "$1" =~ ^-.* ]]; then
		# two arguments where the first one is a valid option and the second doesn't start with minus are valid
		if [[ "$#" == "2" ]] && [[ "$1" == "--default" || "$1" == "--elm" || "$1" == "--purescript-halogen" ]] && [[ "$2" =~ ^[^-].* ]]; then
			break
		fi

		if [[ "$#" == "1" && "$1" == "--version" ]]; then
			echo "ihp-new version: $IHP_NEW_VERSION"
			exit 0
		fi

		echo "Usage: ihp-new PROJECT_NAME"
		echo ""
		echo "or:    ihp-new --OPTION PROJECT_NAME"
		echo ""
		echo "Generates an empty IHP project"
		echo ""
		echo "Full documentation: https://ihp.digitallyinduced.com/Guide/installation.html"
		echo "Project template: $BOILERPLATE_GIT_URL"
		echo ""
		echo "In case there already exists a directory named like the given project name, this script will stop execution."
		echo ""
		echo "Available options:"
		echo ""
		echo "        --version"
		echo "            Print version of ihp-new"
		echo ""
		echo "        --default"
		echo "            (recommended, default, code on branch master)"
		echo "            Generates a pure IHP project."
		echo ""
		echo "        --elm"
		echo "            (code on branch elm)"
		echo "            Generates an IHP project with Elm ready to go."
		echo ""
		echo "        --purescript-halogen"
		echo "            (code on branch purescript-halogen)"
		echo "            Generates an IHP project with PureScript + Halogen ready to go."
		echo ""

		if [[ "$#" == "1" && "$1" == "--help" ]]; then
			exit 0
		fi
		exit 1
	fi
done

PROJECT_NAME=$1
if [[ "$#" == "2" ]]; then
	PROJECT_NAME=$2
fi

if [ -d "$PROJECT_NAME" ]; then
	echo "Directory \"$PROJECT_NAME\" already exists. Please remove the directory and re-run the generator"
	exit 1
fi

if ! [ -x "$(command -v direnv)" ]; then
	echo -e "\e[1m\e[35mDIRENV MISSING\e[0m"
	echo -e "IHP uses direnv to manage env variables."
	echo -e "Learn more about direnv here: \e[4mhttps://direnv.net/\e[0m"
	echo ""
	echo ""
	echo -e "\e[1mWe will install direnv for you now. Continue? (Type y to proceed) \e[0m"
	read -r -n1 choice
	echo ""
	case "$choice" in
	y | Y) nix-env -iA ${NIXPKGS_ATTR}.direnv ;;
	*)
		echo -e "\e[31mPlease install direnv manually and then re-run this program.\e[0m"
		exit 1
		;;
	esac
	echo -e "\e[1mDirenv needs to be hooked into your shell.\e[0m"

	DIRENV_HOOK_ADDED=0
	if [ "${SHELL##*/}" == "bash" ] || [ "${SHELL##*/}" == "zsh" ]; then
		echo -e "\e[1mWould you like to attempt to do this automatically? (Type y to proceed) \e[0m"
		while true; do
			read -r -n1 choice
			echo ""
			case "$choice" in
			y | Y)
				echo "Great!"
				case "${SHELL##*/}" in
				zsh )
					echo "Adding hook to ~/.zshrc...";
					echo 'eval "$(direnv hook zsh)"' >> $HOME/.zshrc
					DIRENV_HOOK_ADDED=1
					;;
				bash )
					echo "Adding hook to ~/.bashrc...";
					echo 'eval "$(direnv hook bash)"' >> $HOME/.bashrc
					DIRENV_HOOK_ADDED=1
					;;
				default )
					echo "\e[31mError: Unrecognised shell[0m";
					;;
				esac

				break
				;;
			n | N)
				break
				;;
			*) echo -e "\e[1mWould you like to attempt to do this automatically? Type \e[33my\e[0m\e[1m for 'yes', \e[33mn\e[0m\e[1m for 'no'. \e[0m" ;;
			esac
		done
	else
		echo -e "\e[31mCouldn't detect what shell you're using.\e[0m"
	fi

	if [ $DIRENV_HOOK_ADDED = 0 ]; then
		echo ""
		echo "Please add the hook manually."
		echo -e "Bash: Add \e[4meval \"\$(direnv hook bash)\"\e[0m to ~/.bashrc"
		echo -e "ZSH: Add \e[4meval \"\$(direnv hook zsh)\"\e[0m to ~/.zshrc"
		echo "Other shells: See https://direnv.net/#README"
		echo -e "\e[1mHave you hooked direnv into your shell? (Type y to proceed) \e[0m"
		while true; do
			read -r -n1 choice
			echo ""
			case "$choice" in
			y | Y)
				echo "Great!"
				break
				;;
			n | N)
				echo -e "\e[1m\e[33mHook direnv into your shell after this script has finished.\e[0m"
				break
				;;
			*) echo -e "\e[1mHave you hooked direnv into your shell? Type \e[33my\e[0m\e[1m for 'yes', \e[33mn\e[0m\e[1m for 'no'. \e[0m" ;;
			esac
		done
		DIRENV_HOOK_ADDED=1
	fi

fi

DIRENV_SETUP=0;
case "${SHELL##*/}" in
zsh )
    if grep direnv "$HOME/.zshrc" "$HOME/.zprofile" 2>&1 >/dev/null; then
        DIRENV_SETUP=1;
    fi;
    ;;
bash )
    if grep direnv "$HOME/.bashrc" "$HOME/.bash_profile" 2>&1 >/dev/null; then
        DIRENV_SETUP=1;
    fi;
    ;;
default )
    echo "\e[1mUnable to check if direnv is setup correctly (unrecognised shell).\e[0m";
    ;;
esac
if [ $DIRENV_SETUP = 0 ] && [ DIRENV_HOOK_ADDED != 1 ]; then
	echo -e "\e[1mDirenv shell hook doesn't seem correct.\e[0m"
	echo -e "Direnv needs to be hooked into your shell. Please follow the steps below:"
	echo -e "Bash: Add \e[4meval \"\$(direnv hook bash)\"\e[0m to ~/.bashrc"
	echo -e "ZSH: Add \e[4meval \"\$(direnv hook zsh)\"\e[0m to ~/.zshrc"
	echo "Other shells: See https://direnv.net/#README"
	echo -e "This could be a false negative if you use a more complex shell profile"
    echo ""
fi


if ! [ -x "$(command -v git)" ]; then
	echo -e "\e[1m\e[35mGIT MISSING\e[0m"
	echo -e "IHP uses git for pulling the project boilerplate."
	echo ""
	echo ""
	echo -e "\e[1mWe will install git for you now using 'nix-env -i git'. Continue? (Type y to proceed) \e[0m"
	read -r -n1 choice
	echo ""
	case "$choice" in
	y | Y) nix-env -iA ${NIXPKGS_ATTR}.git ;;
	*)
		echo -e "\e[31mPlease install git manually and then re-run this program.\e[0m"
		exit 1
		;;
	esac
fi

if ! [ -x "$(command -v make)" ]; then
	echo -e "\e[1m\e[35mMAKE MISSING\e[0m"
	echo -e "IHP uses make for the building process."
	echo ""
	echo ""
	echo -e "\e[1mWe will install make for you now using 'nix-env -i gnumake'. Continue? (Type y to proceed) \e[0m"
	read -r -n1 choice
	echo ""
	case "$choice" in
	y | Y) nix-env -iA ${NIXPKGS_ATTR}.gnumake ;;
	*)
		echo -e "\e[31mPlease install make manually and then re-run this program.\e[0m"
		exit 1
		;;
	esac
fi

if ! [ -x "$(command -v cachix)" ]; then
	echo -e "\e[1m\e[35mCACHIX MISSING\e[0m"
	echo -e "IHP uses cachix as a binary cache."
	echo -e "Learn more about cachix here: \e[4mhttps://cachix.org/\e[0m"
	echo ""
	echo ""
	echo -e "\e[1mWe will install cachix for you now. Continue? (Type y to proceed) \e[0m"
	read -r -n1 choice
	echo ""
	case "$choice" in
	y | Y) nix-env -iA ${NIXPKGS_ATTR}.cachix ;;
	*)
		echo -e "\e[31mPlease install cachix manually and then re-run this program.\e[0m"
		exit 1
		;;
	esac
fi

if ! grep -s -q "digitallyinduced.cachix.org-1:y+wQvrnxQ+PdEsCt91rmvv39qRCYzEgGQaldK26hCKE=" ~/.config/nix/nix.conf; then
	echo -e "\e[1mCachix doesn't seem to be configured\e[0m"
	echo -e "IHP provides a cachix cache with binaries for all IHP packages and commonly used dependencies."
	echo -e "While not required, this greatly speeds up the installation & build process."
	echo -e "This could be a false negative if you use a more complex nix configuration."
	echo ""
	echo ""
	echo -e "\e[1mWe will configure the cache for you now using 'cachix use digitallyinduced'. Continue? (Type y to proceed) \e[0m"
	read -r -n1 choice
	echo ""
	case "$choice" in
	y | Y) cachix use digitallyinduced ;;
	*) echo -e "Skipping cachix configuration" ;;
	esac
fi

BOILERPLATE_GIT_BRANCH="master"

if [[ "$1" == "--elm" ]]; then
	echo "We will now create your new IHP project with Elm. This may take up to 30 seconds."
	BOILERPLATE_GIT_BRANCH="elm"
elif [[ "$1" == "--purescript-halogen" ]]; then
	echo "We will now create your new IHP project with PureScript + Halogen. This may take up to 30 seconds."
	BOILERPLATE_GIT_BRANCH="purescript-halogen"
else
	echo "We will now create your new IHP project. This may take up to 30 seconds."
fi

git clone --quiet --depth=1 --branch "$BOILERPLATE_GIT_BRANCH" "$BOILERPLATE_GIT_URL" -- "$PROJECT_NAME"
cd "$PROJECT_NAME"
rm -rf ".git"
chmod go-w .ghci || true

# Generating Web/ directory
nix --extra-experimental-features "nix-command flakes" develop --impure --accept-flake-config --command bash -c "make -s all; new-application Web"

# Warming up direnv
direnv allow
direnv exec . "true"

if [[ "$BOILERPLATE_GIT_BRANCH" == "elm" ]]; then
	nix --extra-experimental-features "nix-command flakes" develop --impure --accept-flake-config --command bash -c 'patch Web/View/Layout.hs -i Layout.hs.patch; patch Web/View/Static/Welcome.hs -i Welcome.hs.patch; npm install'
	rm Layout.hs.patch Welcome.hs.patch
elif [[ "$BOILERPLATE_GIT_BRANCH" == "purescript-halogen" ]]; then
	nix --extra-experimental-features "nix-command flakes" develop --impure --accept-flake-config --command bash -c 'patch Web/View/Layout.hs -i Layout.hs.patch; patch Web/View/Static/Welcome.hs -i Welcome.hs.patch; npm install'
	rm Layout.hs.patch Welcome.hs.patch
fi

echo ""
echo "ðŸš€ Project created, happy coding :)"
echo "You can start the server by running:"
echo "  cd $PROJECT_NAME"
echo "  devenv up"
